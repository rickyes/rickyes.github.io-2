<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[should.js 写法实现]]></title>
    <url>%2F2018%2F04%2F01%2Fdefind20180401%2F</url>
    <content type="text"><![CDATA[关于 should.js先上代码12345678var should = require('should');var user = &#123; name: 'tj' , pets: ['tobi', 'loki', 'jane', 'bandit']&#125;;user.should.have.property('name', 'tj'); // true 看到这样的写法是不是很酷炫，反正我当时就是，我们来一步一步实现它。 原型链首先user这个对象本身是没有should这个属性的，那就肯定是往原型链上找了，所以事先把这个属性挂载到Object.prototype上 1234567891011// 1、function tool(obj)&#123; this._obj = obj;&#125;// 2、Object.defineProperty(Object.prototype,'tool',&#123; get: function()&#123; return new tool(this); &#125;&#125;); 1、先定义一个函数，将调用对象的this当做tool函数的内部对象传入 2、在Object.prototype上定义一个名为为tool的属性，设置这个属性的get访问拦截返回通过构造函数实例化的tool 看看效果123456789const tool = require('./lib/defind');const user = &#123; a: 1, b: 'test'&#125;;console.log(user.tool); // 3、 3、打印了 tool { _obj: { a: 1, b: &#39;test&#39; } } 就是这么简单实现了这种酷炫的写法，添加一个tool的方法判断调用对象是否有该属性123tool.prototype.has = function(key)&#123; return this._obj.hasOwnProperty(key);&#125; 4、刚才在tool函数里保存的_obj现在起作用了 console一下 1234let has = user.tool.has('a');console.log(has); // truehas = user.tool.has('c');console.log(has); // false 剩下的api有兴趣的朋友自己实现吧~ 参考链接： https://github.com/tj/should.js]]></content>
      <categories>
        <category>JavsScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>defineProperty</tag>
        <tag>Object.prototype</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS对象属性探究]]></title>
    <url>%2F2018%2F04%2F01%2FObject20180401%2F</url>
    <content type="text"><![CDATA[对象ECMAScript 将对象的属性分为数据属性和访问器属性,属性描述符有两种主要形式：数据描述符和存取描述符,使用defineProperty可以为对象已有的属性添加特性描述：12345678910var obj = &#123; test:&quot;hello&quot;&#125;//对象已有的属性添加特性描述Object.defineProperty(obj,&quot;test&quot;,&#123; configurable:true | false, // 是否可以删除目标属性或是否可以再次修改属性的特性（writable, configurable, enumerable） enumerable:true | false, // 是否可枚举 value:任意类型的值, writable:true | false // 属性的值是否可以被重写&#125;); ES5有三个操作会忽略enumerable为false的属性： for…in循环：只遍历对象自身的和继承的可枚举的属性 Object.keys()：返回对象自身的所有可枚举的属性的键名 JSON.stringify()：只串行化对象自身的可枚举的属性 Object.getOwnPropertyNames获取该对象不包括原型链所有的属性包括不可枚举的ES6新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。123456789Object.getOwnPropertyDescriptor(Object.prototype, &apos;toString&apos;).enumerable// falseObject.prototype.propertyIsEnumerable(&apos;toString&apos;) // falseObject.getOwnPropertyDescriptor([], &apos;length&apos;).enumerable// false[].propertyIsEnumerable(&apos;length&apos;) // false toString和length属性的enumerable都是false，因此for…in不会遍历到这两个继承自原型的属性。 当使用了getter或setter方法，不允许使用writable和value这两个属性。 ES5 环境，Object.keys如果传入的参数不是一个对象，而是一个字符串，那么它会报 TypeError。在 ES6 环境，如果传入的是一个非对象参数，内部会对参数作一次强制对象转换，如果转换不成功会抛出 TypeError。12345// 在 ES5 环境Object.keys(&apos;foo&apos;); // TypeError: &quot;foo&quot; is not an object// 在 ES6 环境Object.keys(&apos;foo&apos;); // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;] 参考链接： https://www.zhihu.com/question/40648241?from=profile_question_card https://www.cnblogs.com/wujie520303/p/4931384.html https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain]]></content>
      <categories>
        <category>JavsScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Object</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量声明之旅]]></title>
    <url>%2F2017%2F12%2F01%2Ftest%2F</url>
    <content type="text"><![CDATA[var、let、const 定义变量var 定义的变量允许变量提升（Hoisting），还涉及到 变量进行 LHS（Left Hand Side）查找123举个栗子：console.log(x); // var is upvar x = 'var is up'; 但是得注意一下，var声明的变量可以提升，但是如果是一个定义一个函数，函数表达式是不可以提升的，如下:12345678910var x = func();var func = function()&#123; return 'this is function';&#125;// 相当于下面的代码：var func;var x = func();func = function()&#123; return 'this is function';&#125; 上面那段代码会被爆出TypeError,变量func被提升了，但是后面的函数表达式没被提升，提升的func的初始化是var func = undefined,上面的操作相当于undefined(),所以就爆TypeError了; 函数声明和函数表达式声明函数声明会整体提升到当前作用域的顶端，而函数表达式声明只提升变量名，表达式并不会提升（栗子看上面👆代码），举个🌰 ：123456789101112test() // 1test2() // TypeError// 函数声明function test()&#123; console.log(1);&#125;// 函数表达式声明var test2 = function()&#123; console.log(2);&#125; 作用域var 并不是块级作用域，所以容易造成作用域污染，在全局作用域下用var定义一个变量会被挂载到global或window中,看下面这段代码：1234function test()&#123; for(var i = 0; i &lt; 3; i++)&#123;&#125; console.log(i); // 3&#125; 上面那段代码，在}外依旧能访问到 i 。let 是块级作用域，而且在全局作用域定义的变量并不会被挂载到global货window中：1234function test()&#123; for(let i = 0; i &lt; 3; i++)&#123;&#125; console.log(i); // i is defined&#125; const 是定义常量，和java的final关键字类似，但是有一点区别的是，const定义的如果的对象，则对象里面的参数值是可以改变的，const的作用是保证初始定义的变量的内存地址是不变的。123456const a = 1;a = 2; // Assignment to constant variableconst obj = &#123;&#125;;obj.a = 1;console.log(obj.a); // 1 PS: 能用const定义的就用const]]></content>
      <categories>
        <category>JavsScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>let</tag>
        <tag>const</tag>
        <tag>var</tag>
      </tags>
  </entry>
</search>
