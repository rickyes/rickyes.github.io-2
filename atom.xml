<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泽阳 | 追逐繁星的孩子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://git.zhoumq.cn/"/>
  <updated>2018-04-05T06:55:46.000Z</updated>
  <id>http://git.zhoumq.cn/</id>
  
  <author>
    <name>Allen泽阳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置gzip压缩文件</title>
    <link href="http://git.zhoumq.cn/2018/04/05/gzip20180405/"/>
    <id>http://git.zhoumq.cn/2018/04/05/gzip20180405/</id>
    <published>2018-04-05T06:39:58.000Z</published>
    <updated>2018-04-05T06:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>由于网络等原因前端页面加载速度慢，有种办法就是开启<code>nginx</code>的<code>gzip</code>，压缩资源文件，前端下载完了自会解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启gzip</span></span><br><span class="line">gzip off;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间(压缩级别越高CPU计算越久)</span></span><br><span class="line">gzip_comp_level 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span></span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用IE 6 gzip</span></span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置压缩所需要的缓冲区大小     </span></span><br><span class="line">gzip_buffers 32 4k;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置gzip压缩针对的HTTP协议版本</span></span><br><span class="line">gzip_http_version 1.0;</span><br></pre></td></tr></table></figure><p>开启gzip后，可以适当的调节压缩级别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记得测试配置文件是否正常：</span></span><br><span class="line">./nginx -t </span><br><span class="line"><span class="comment"># 平滑重启</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gzip&quot;&gt;&lt;a href=&quot;#gzip&quot; class=&quot;headerlink&quot; title=&quot;gzip&quot;&gt;&lt;/a&gt;gzip&lt;/h2&gt;&lt;p&gt;由于网络等原因前端页面加载速度慢，有种办法就是开启&lt;code&gt;nginx&lt;/code&gt;的&lt;code&gt;gzip&lt;/code&gt;，
      
    
    </summary>
    
      <category term="Nginx" scheme="http://git.zhoumq.cn/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://git.zhoumq.cn/tags/nginx/"/>
    
      <category term="gzip" scheme="http://git.zhoumq.cn/tags/gzip/"/>
    
  </entry>
  
  <entry>
    <title>JS类型检测</title>
    <link href="http://git.zhoumq.cn/2018/04/01/type20180401/"/>
    <id>http://git.zhoumq.cn/2018/04/01/type20180401/</id>
    <published>2018-04-01T09:08:37.000Z</published>
    <updated>2018-04-01T10:27:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>首先贴下ECMA定义的类型</p><p>基本数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>Boolean（布尔）</li><li>Symbol（符号）（第六版新增）</li><li>Null（空）</li><li>Undefined（未定义）</li></ul><p>复杂数据类型:</p><ul><li>Object</li></ul><p>Object 包含：</p><ul><li>Function（函数）</li><li>Array（数组）</li><li>Date（日期）</li><li>RegExp（正则表达式）</li><li>Error (错误)</li></ul><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 是一元运算符，返回时数据的类型字符串，看代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'str'</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> unde = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> na = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">let</span> nu = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> number); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> func); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bool); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> unde); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> na); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sy); <span class="comment">// symbol</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> nu); <span class="comment">// object</span></span><br></pre></td></tr></table></figure></p><p>typeof 能静准的判断基本数据类型，却不能精准的判断引用数据类型</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。就是检查是否属于某个目标的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cc = <span class="keyword">new</span> c();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cc <span class="keyword">instanceof</span> c); <span class="comment">// true 因为 Object.getPrototypeOf(o) === C.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cc <span class="keyword">instanceof</span> d); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cc <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(d <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">c.prototype = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cc <span class="keyword">instanceof</span> c); <span class="comment">// false c.prototype指向了一个空对象,这个空对象不在cc的原型链上</span></span><br></pre></td></tr></table></figure></p><p>instanceof 只能检测是否是目标的实例（处于目标的原型链上）</p><h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h2><p>让检测对象的prototype上有Object.prototype的toString方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'str'</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> unde = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> na = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">let</span> nu = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(number)); <span class="comment">// [object Number]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(str)); <span class="comment">// [object String]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(func)); <span class="comment">// [object Function]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(arr)); <span class="comment">// [object Array]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(obj));  <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(bool));  <span class="comment">// [object Boolean]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(unde)); <span class="comment">// [object Undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(na)); <span class="comment">// [object Number]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(sy)); <span class="comment">// [object Symbol]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(nu)); <span class="comment">// [object Null]</span></span><br></pre></td></tr></table></figure><p>完美~</p><p>安利一个函数检测数据类型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">val,type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(val) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Type = <span class="built_in">Object</span>.defineProperties(&#123;&#125;,&#123;</span><br><span class="line">  <span class="string">'Array'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Array'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Object'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Object'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Function'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Function'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'String'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'String'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Number'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Number'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Boolean'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Boolean'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Symbol'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Symbol'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Undefined'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Undefined'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Null'</span>: &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'Null'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">console</span>.log(isType(number,Type.Number));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(str,Type.String));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(func,Type.Function));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(arr,Type.Array));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(obj,Type.Object));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(bool,Type.Boolean));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(unde,Type.Undefined));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(sy,Type.Symbol));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(nu,Type.Null));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h2&gt;&lt;p&gt;首先贴下ECMA定义的类型&lt;/p&gt;
&lt;p&gt;基本数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number（数字）&lt;/li&gt;
&lt;li&gt;String（字
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/tags/JavaScript/"/>
    
      <category term="defineProperty" scheme="http://git.zhoumq.cn/tags/defineProperty/"/>
    
      <category term="Type" scheme="http://git.zhoumq.cn/tags/Type/"/>
    
      <category term="call" scheme="http://git.zhoumq.cn/tags/call/"/>
    
      <category term="typeof" scheme="http://git.zhoumq.cn/tags/typeof/"/>
    
      <category term="instanceof" scheme="http://git.zhoumq.cn/tags/instanceof/"/>
    
  </entry>
  
  <entry>
    <title>should.js 写法实现</title>
    <link href="http://git.zhoumq.cn/2018/04/01/defind20180401/"/>
    <id>http://git.zhoumq.cn/2018/04/01/defind20180401/</id>
    <published>2018-04-01T08:27:17.000Z</published>
    <updated>2018-04-01T09:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-should-js"><a href="#关于-should-js" class="headerlink" title="关于 should.js"></a>关于 should.js</h2><p>先上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'should'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">'tj'</span></span><br><span class="line">  , <span class="attr">pets</span>: [<span class="string">'tobi'</span>, <span class="string">'loki'</span>, <span class="string">'jane'</span>, <span class="string">'bandit'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.should.have.property(<span class="string">'name'</span>, <span class="string">'tj'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>看到这样的写法是不是很酷炫，反正我当时就是，我们来一步一步实现它。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>首先user这个对象本身是没有should这个属性的，那就肯定是往原型链上找了，所以事先把这个属性挂载到Object.prototype上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tool</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype,<span class="string">'tool'</span>,&#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> tool(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>1、先定义一个函数，将调用对象的this当做tool函数的内部对象传入</li><li>2、在Object.prototype上定义一个名为为tool的属性，设置这个属性的get访问拦截返回通过构造函数实例化的tool</li></ul><p>看看效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> tool = <span class="built_in">require</span>(<span class="string">'./lib/defind'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  user = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="string">'test'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.tool); <span class="comment">// 3、</span></span><br></pre></td></tr></table></figure></p><ul><li>3、打印了  <code>tool { _obj: { a: 1, b: &#39;test&#39; } }</code></li></ul><p>就是这么简单实现了这种酷炫的写法，添加一个tool的方法判断调用对象是否有该属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tool.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._obj.hasOwnProperty(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>4、刚才在tool函数里保存的_obj现在起作用了</li></ul><p>console一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> has = user.tool.has(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(has); <span class="comment">// true</span></span><br><span class="line">has = user.tool.has(<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(has); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>剩下的api有兴趣的朋友自己实现吧~</p><p>参考链接：</p><ul><li><a href="https://github.com/tj/should.js" target="_blank" rel="noopener">https://github.com/tj/should.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于-should-js&quot;&gt;&lt;a href=&quot;#关于-should-js&quot; class=&quot;headerlink&quot; title=&quot;关于 should.js&quot;&gt;&lt;/a&gt;关于 should.js&lt;/h2&gt;&lt;p&gt;先上代码&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/tags/JavaScript/"/>
    
      <category term="defineProperty" scheme="http://git.zhoumq.cn/tags/defineProperty/"/>
    
      <category term="Object.prototype" scheme="http://git.zhoumq.cn/tags/Object-prototype/"/>
    
  </entry>
  
  <entry>
    <title>JS对象属性探究</title>
    <link href="http://git.zhoumq.cn/2018/04/01/Object20180401/"/>
    <id>http://git.zhoumq.cn/2018/04/01/Object20180401/</id>
    <published>2018-04-01T08:17:09.000Z</published>
    <updated>2018-04-01T09:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>ECMAScript 将对象的属性分为数据属性和访问器属性,属性描述符有两种主要形式：数据描述符和存取描述符,<br>使用defineProperty可以为对象已有的属性添加特性描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    test:&quot;hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">//对象已有的属性添加特性描述</span><br><span class="line">Object.defineProperty(obj,&quot;test&quot;,&#123;</span><br><span class="line">    configurable:true | false, // 是否可以删除目标属性或是否可以再次修改属性的特性（writable, configurable, enumerable）</span><br><span class="line">    enumerable:true | false, // 是否可枚举</span><br><span class="line">    value:任意类型的值,</span><br><span class="line">    writable:true | false // 属性的值是否可以被重写</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>ES5有三个操作会忽略enumerable为false的属性：</p><ul><li>for…in循环：只遍历对象自身的和继承的可枚举的属性</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性</li></ul><p>Object.getOwnPropertyNames获取该对象不包括原型链所有的属性包括不可枚举的<br>ES6新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object.getOwnPropertyDescriptor(Object.prototype, &apos;toString&apos;).enumerable</span><br><span class="line">// false</span><br><span class="line"></span><br><span class="line">Object.prototype.propertyIsEnumerable(&apos;toString&apos;) // false</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertyDescriptor([], &apos;length&apos;).enumerable</span><br><span class="line">// false</span><br><span class="line"></span><br><span class="line">[].propertyIsEnumerable(&apos;length&apos;) // false</span><br></pre></td></tr></table></figure></p><p>toString和length属性的enumerable都是false，因此for…in不会遍历到这两个继承自原型的属性。</p><blockquote><p>当使用了getter或setter方法，不允许使用writable和value这两个属性。</p></blockquote><p>ES5 环境，Object.keys如果传入的参数不是一个对象，而是一个字符串，那么它会报 TypeError。在 ES6 环境，如果传入的是一个非对象参数，内部会对参数作一次强制对象转换，如果转换不成功会抛出 TypeError。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在 ES5 环境</span><br><span class="line">Object.keys(&apos;foo&apos;); // TypeError: &quot;foo&quot; is not an object</span><br><span class="line"></span><br><span class="line">// 在 ES6 环境</span><br><span class="line">Object.keys(&apos;foo&apos;); // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure></p><p>参考链接：</p><ul><li><a href="https://www.zhihu.com/question/40648241?from=profile_question_card" target="_blank" rel="noopener">https://www.zhihu.com/question/40648241?from=profile_question_card</a></li><li><a href="https://www.cnblogs.com/wujie520303/p/4931384.html" target="_blank" rel="noopener">https://www.cnblogs.com/wujie520303/p/4931384.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;p&gt;ECMAScript 将对象的属性分为数据属性和访问器属性,属性描述符有两种主要形式：数据描述符和存取描述符,&lt;br&gt;使用definePro
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/tags/JavaScript/"/>
    
      <category term="Object" scheme="http://git.zhoumq.cn/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>变量声明之旅</title>
    <link href="http://git.zhoumq.cn/2017/12/01/test/"/>
    <id>http://git.zhoumq.cn/2017/12/01/test/</id>
    <published>2017-11-30T16:28:10.000Z</published>
    <updated>2018-04-01T09:06:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var、let、const-定义变量"><a href="#var、let、const-定义变量" class="headerlink" title="var、let、const 定义变量"></a>var、let、const 定义变量</h2><p>var 定义的变量允许变量提升（Hoisting），还涉及到 变量进行 LHS（Left Hand Side）查找<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个栗子：</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// var is up</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'var is up'</span>;</span><br></pre></td></tr></table></figure></p><p>但是得注意一下，var声明的变量可以提升，但是如果是一个定义一个函数，函数表达式是不可以提升的，如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = func();</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'this is function'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于下面的代码：</span></span><br><span class="line"><span class="keyword">var</span> func;</span><br><span class="line"><span class="keyword">var</span> x = func();</span><br><span class="line">func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'this is function'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面那段代码会被爆出TypeError,变量func被提升了，但是后面的函数表达式没被提升，提升的func的初始化是var func = undefined,上面的操作相当于undefined(),所以就爆TypeError了;</p><h2 id="函数声明和函数表达式声明"><a href="#函数声明和函数表达式声明" class="headerlink" title="函数声明和函数表达式声明"></a>函数声明和函数表达式声明</h2><p>函数声明会整体提升到当前作用域的顶端，而函数表达式声明只提升变量名，表达式并不会提升（栗子看上面👆代码），举个🌰 ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test() <span class="comment">// 1</span></span><br><span class="line">test2() <span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式声明</span></span><br><span class="line"><span class="keyword">var</span> test2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>var 并不是块级作用域，所以容易造成作用域污染，在全局作用域下用var定义一个变量会被挂载到global或window中,看下面这段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面那段代码，在}外依旧能访问到 i 。<br>let 是块级作用域，而且在全局作用域定义的变量并不会被挂载到global货window中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// i is defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>const 是定义常量，和java的final关键字类似，但是有一点区别的是，const定义的如果的对象，则对象里面的参数值是可以改变的，const的作用是保证初始定义的变量的内存地址是不变的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// Assignment to constant variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>PS: 能用const定义的就用const</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;var、let、const-定义变量&quot;&gt;&lt;a href=&quot;#var、let、const-定义变量&quot; class=&quot;headerlink&quot; title=&quot;var、let、const 定义变量&quot;&gt;&lt;/a&gt;var、let、const 定义变量&lt;/h2&gt;&lt;p&gt;var 定义
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://git.zhoumq.cn/tags/JavaScript/"/>
    
      <category term="let" scheme="http://git.zhoumq.cn/tags/let/"/>
    
      <category term="const" scheme="http://git.zhoumq.cn/tags/const/"/>
    
      <category term="var" scheme="http://git.zhoumq.cn/tags/var/"/>
    
  </entry>
  
</feed>
